# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F-P4cVjqmwiKLNwaJa-0eevyRmWth8uQ
"""

import pandas as pd

"""Les rythmes sont représentés de la manière suivante : 
ronde = 32, puis on divise mathématiquement : blanche = 16, noir = 8, croche = 4,... triple croche = 1. Si on veut plus rapide on passe en dessous de 1 (à éviter sauf si c'est vraiment nécessaire)
On peut représenter une blanche pointée par la valeur 24 (et pareil pour toutes les valeurs pointés)
Si vous voulez changer pour un autre système d'écriture, choisisez-vite (le plus important c'est qu'on utilise tous le même)

Emotions faites: funny, pride, fear, sadness, joy, annoyance, neutral
"""

# derniere_voix sert à initialiser les Series. C'est également ce qui indique la fin d'une des voix dans les 'emotion_struct'
derniere_voix = pd.Series([], dtype = object) # attention, cette definition sera peut-être opsolete dans des versions futurs de python

struct_globale = [[0,'i'],[1,'i'],[0,'i'],[2,'i'],[0,'rt+2'],[1,'rt+2'],[0,'r'],[2,'r']]
option_rythme_voix2 = ['-acc','-lyr2','-lyr2','-lyr1']
sadness_structure_voix2 = pd.Series([struct_globale, 2, option_rythme_voix2, None, derniere_voix, 80], 
                        index=['struct_globale','taille_des_structures','option_rythme','instrument','autre_voix','volume'])
option_rythme_voix1 = ['-lyr1','-lyr2','-lyr2','-lyr1'] 

sadness_structure = pd.Series([struct_globale, 2, option_rythme_voix1, None, sadness_structure_voix2, 100], 
                    index=['struct_globale','taille_des_structures','option_rythme','instrument','autre_voix','volume'])

# debut et fin font référence au début ou la fin d'une structure mélodique
etiquette = ['debut-lyr1', 'fin-lyr1', 'debut-lyr2', 'fin-lyr2', 'debut-acc', 'fin-acc'] # ce ne sont pas forcement les etiquettes définitives, on peut rajouter des choses
# Les étiquettes définitives peuvent être typiquement : mesure de début de structure, de fin de structure, mais aussi mesures spéciales (par exemple de début ou de fin de morceau)
# pour les premières et dernières structures d'un morceau par exemple
sadness_rythme = pd.Series([[[8,8,8,8],[8,8,8,4,4],[4,4,4,4,8,4,4],[8,4,4,8,4,4]], 
                            [[8,4,4,2,2,4,8],[8,8,16],[4,4,4,4,8,8]], 
                            [[12,4,12,4],[16,16]], 
                            [[16,16],[12,4,12,4],[16,8,8]], 
                            [[8,8,8,8],[16,16],[8,8,16]], 
                            [[16,16],[8,8,16]]], index=etiquette)



# struct_globale est une suite qui donne la composition de la structure globale.
# Cette suite contient un chiffre indiquant si la strcuture est basé sur la première (0), deuxième (1), ect... structure rythmique du morceau
# La structure correspondant au chiffre i est précisement la structure stocké dans structures[i]
# le str à coté du chiffre donne une indication sur la variation à réaliser sur la structure rythmique considérée : 
# structures qui se répètent rythmiquement mais sans lien mélodiquement ('r')
# des structures qui se répètent rythmiquement et qui transposent mélodiquement ('rt') 
# et des structures qui se repetent à l'identique ('i')
# on peut inventer d'autres types d'infos au besoin. Ces infos sont communes à la generation rythmique et mélodique

# 'taille_des_structures' est un int qui indique de combien de mesure sont composés les structures

# 'structures_rythmes','structures_notes' sont des listes vides au départ
# gobalement, il n'est même pas nécessaire de les mettre dans la series emotion_struct
# après passage dans l'algorithme, on y stock une liste de liste. Chaque liste contient une structure de 'taille_de_structure' mesures
# pour chaque numéros dans struct_globale, on construit par tirage au hasard une strucutre dans 'structures_rythmiques'

# 'intrument' définit le type d'instrument qui devra jouer les instructions. Cette information sera transmise au générateur de son
# L'info est peut-être inutile (le timbre est défini indépendement en fonction d'autres paramètres)

# autre_voix peut être utilisée si on veut ajouter une voix (acompagnement ou contre chant). Il faut alors définir une nouvelle structure globale, du même format
# On peut ajouter par casscade de cette manière des voix supplémentaires à l'infini (limite fixé à 99 pour l'instant)
# La dernière voix doit nécessairement être une serie vide (qu'on peut définir par derniere_voix = pd.Series([], dtpye = list) )

# Volume est un entier entre 1 et 100. Il définit le volume des pistes les unes par rapport aux autres
# ce n'est pas très important car on peut redefinir ce volume plus tard au moment du mixage des voix, mais ça peut servir justement à ce moment là pour avoir l'info de ce qui est important






# creation melodie : 

# fondamentale : permet de définir la tonalitée (ça pourrait être un parametre aléatoire)

# gammes : array de listes qui contienent les gammes possibles
# une gamme est définie par l'ecart entre chaque notes
# les gammes majeurs, mineurs, et mineur avec sensible altérées sont déjà définies plus haut
# CORRECTIF : Pour l'instant, gammes ne contient qu'une gamme donc ce n'est pas un array
# On pourra ajouter des gammes plus tard si necessaire
# Attention : les notes de liste_gamme sont indiquées par rapport à la gamme chromatique, mais les autres notes
# indiquées dans d'autres paramètres sont indiquées par rapport à la liste_gamme choisie
# Quelque gammes déjà définies : 
liste_gamme_majeur = [0,2,4,5,7,9,11]
liste_gamme_mineur = [0,2,3,5,7,8,10]
liste_gamme_minSensibleAlter = [0,2,3,5,7,8,11]
liste_gamme_pynthatoniqueMin = [0,3,5,7,11]
liste_gamme_pynthatoniqueMaj = [0,4,5,7,11]
liste_gamme_jazz1 = [0,3,4,5,7,10,11]
liste_gamme_chromatique = [0,1,2,3,4,5,6,7,8,9,10,11]


# duree_temps_fort : c'est la durée entre chaque temps fort
# typiquement en 4/4, ça sera la blanche ou la ronde (et défois la noire)
# Et en 3/4, ça pourra être la blanche pointée
# Je n'ai rien prévu pour qu'elle puisse être irrégulière pour l'instant
# Irrégulière = comme en 8/8 parfois ou on a des découpages 3,3,2

# premiere note : définit les premieres notes possibles dans la gamme choisie pour commencer le morceau ou pour le 
# reprendre après certains évenements (un silence ou une "double barre" par exemple)
# On prendra typiquement 0 et 4 (tonique et dominante) : 
premiere_note_classique = [0]
premiere_note_classique2 = [0,4]

# accords : Contient une liste de liste d'accord. 
# Il y a une liste pour chaque structures du morceau (pour chaque élements de strucutres) la liste des accords
# Il y a un accord pour chaque élements de durée duree_temps_fort de la structure
# Les notes indiquées sont les notes dans la gamme choisie (à chager -> définir les accords dans la gamme pythatonique perméterait d'avoir des accords plus généraux)
# (On n'est alors même plus obligé de définir la gamme du morceau, on peut juste définir l'accord rajouter un indice de transposition)
# Quelque accords classique si votre liste_gamme est liste_gamme_majeur ou une des liste_gamme_mineur :
acc_parfait = [0,2,4]
acc_parfait1rev = [-3,0,2]
acc_final = [0,0,0,7]
acc_septieme3 = [-1,1,3]
acc_septieme4 = [-1,1,3,5]
acc_dominante3 = [-3,-1,1,4] # remarque : l'ordre des notes de l'accord peut avoir du sens
acc_dominante4 = [-1,1,2,4]
acc_mediante = [2,4,6]
acc_seconde = [-2,0,1,3,5]


# ornementation : contient pour chaque elements de duree duree_temps_fort dans le morceau l'accord correspondant
# comme pour accords, on doit avoir len(ornementations) == duree_morceau//duree_temps_fort
# Une ornementation contient trois listes correspondant à la note post dernier accord, pre accord suivant, et aux autres
# Si il n'y a qu'une seule note de passage, c'est la pre accord suivant qui est jouée, ensuite, la post accord, et enfin les autres
# les orn_type indiquent si une note de passage est choisie dans l'absolu ('abs'), 
# ou par décalage par rapport à la note d'avant('avn') ou d'aprés('apr')
# c'est une chaine de caractère toujours située à la position 0 d'une liste de décalage d'ornememantation
# ! 'apr' ne peut être utilisé que dans la 3e liste d'une ornementation, et ne peut pas être utilisé sur le dernier temps fort d'une struct
# # note 1 : je rajoute 'ars' (avant répété sur la suivante) qui permet de choisir en fonction de la note d'avant et de faire varier la note d'après avec le même écart
# ça peut être trés utile pour les marches harmoniques en seconde ou en tierce
# ! ne peut pas être utilisé sur le dernier temps fort
# De plus, si 'ars' est utilisé au millieux de l'orn, alors il prend le pas sur le pre temps fort (sauf si il n'y a que une ou deux notes de passage)
# note 2 : On rajoute 'red' (random entre-deux) dont l'écart indiqué correspond à l'écart entre la note précedante et la note située deux coups
# plus loin, la note entre les deux sera tirée au hasard entre leur deux valeur; (je ne suis pas sur qu'il sera très util celui-la)
# liste d'ornementation utilisables
# (remarque pour la suite : plutôt que d'utiliser ce système, il vaudrait mieux fournir des listes d'enchainements possibles
# au programme, éventuellement dépendants des conditions. Il faut ensuite fixer un critère, éventuellement l'aléatoire, qui définit quel
# enchainement l'ordi choisit parmi ceux qui sont possibles dans un cas donné dans le morceau)
orn_conjoint = [['avn',-1,1],['avn',-1,1],['avn',1,-1]]
orn_conjoint_melodique = [['ars',-1,1],['ars',-1,1],['ars',-1,1]] # Le meilleur pour les mouvements conjoints
orn_retard_conjoint_appogiature = [['avn',0],['avn',-1,1],['apr',-1,1]] # vérifier si les appoggiatures marchent
orn_retard_conjoint = [['avn',0],['avn',-1,1],['avn',-1,1]]
orn_conjoint_appoggiature = [['avn',-1,1],['ars',-1,1],['apr',-1,1]] # Celui là est probablement pas mal
orn_quasiConjoint_appoggiature = [['avn',-2,-1,1,2],['avn',-1,-1,1,1,0],['apr',1,-1]]


orn_accord_parfait = [['abs',0,2,4],['abs',0,2,4],['abs',0,2,4]]
orn_accord_septieme = [['abs',1,3,4,6],['abs',1,3,4,6],['abs',1,3,4,6]]

orn_random = [['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6]]
orn_conjoint_randomLim_echapee = [['avn',-1,1],['abs',0,2,3,4],['abs',5]]
orn_conjoint_echapee_montant = [['avn',-1,1],['avn',1],['avn',1,2]]
orn_conjoint_echapee_descendant = [['avn',-1,1,1],['avn',-1],['avn',-1,-2]]

orn_avantFinal = [['avn',-1,1],['abs',-1,1,2,4],['apr',-1,2]]
orn_final = [['avn',-1,1],['abs',-3,0,4],['abs',0]]
orn_retard_ascendant1 = [['avn',0],['avn',0,1,1,1],['avn',0,1,1,2]]
orn_retard_ascendant2 = [['avn',0],['avn',0,1,1,1],['apr',-1,1]]

orn_conjoint_ton = [['ars',-2,2],['ars',-2,2],['ars',-2,2]] # Pour la gamme par demi-ton

# tempo : c'est une liste de deux élements qui correspondent à des tempos à la noire
# Le tempo est choisit au hasard entre les deux élements
# On peut aussi entrer un int, dans ce cas le tempo à la noire est égal au int
# quelque tempos classiques : 
largo = [48,60]
adagio = [56,72]
andante = [76,90]
allegro = [100,120]
presto = [140,160]


accords2 = [[acc_parfait,acc_parfait,acc_mediante,acc_mediante],[acc_septieme3,acc_mediante,acc_septieme4,acc_dominante4],[acc_parfait,acc_septieme4,acc_dominante4,acc_final]]
ornementations2 = [[orn_retard_ascendant2,orn_retard_ascendant1,orn_conjoint_echapee_montant,orn_conjoint_echapee_montant],[orn_conjoint_melodique,orn_conjoint_melodique,orn_conjoint_echapee_descendant,orn_conjoint_echapee_descendant],[orn_retard_conjoint_appogiature,orn_conjoint_melodique,orn_avantFinal,orn_final]]

accords = [[acc_parfait,acc_dominante3],[acc_parfait,acc_dominante3],[acc_dominante4,acc_final]]
ornementations = [[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_final]]

sadness_notes_voix2 = pd.Series([liste_gamme_mineur, 32, premiere_note_classique, 3, accords, ornementations, largo, derniere_voix], 
                        index=['liste_gammes','duree_temps_fort','premiere_note','hauteur_moyenne','accords','ornementations','tempo','autre_voix'])

sadness_notes = pd.Series([liste_gamme_mineur, 32, premiere_note_classique, 4, accords, ornementations, adagio, sadness_notes_voix2], 
                        index=['liste_gammes','duree_temps_fort','premiere_note','hauteur_moyenne','accords','ornementations','tempo','autre_voix'])


description = "Il s'agit d'une architecture de morceau évoquant la tristesse"

sadness = pd.Series([sadness_structure, sadness_rythme, sadness_notes, description],
                    index = ['emotion_structure', 'emotion_rythme', 'emotion_notes', 'description'])





# definir d'une nouvelle façon les notes de passage, de manière plus globale (mouvement ascendant, descendant, forme du développement)
# par exemple faire que la note_suivante soit une note variant dans le même sens que note dans les mouvements conjoints en ornementations
# et faire que les notes d'accord suivent le mouvemenent des notes d'ornementation
# definir des cadences à certains moments critiques du morceau (par exemple à la fin) ?

# On peut aussi redéfinir les ornementations avec des notations "globales" (qui indiquent le mouvement globale voulue)

# !! La hauteur des notes ne se conscerve pas d'une structure à l'autre pour l'instant 
# (il faudrait que hauteur soit gérée par la fonction principale)

# éventuellement réorganiser les entrés sorties dans la fonction qui gère les variations de structure
# (Il doit y avoir un moyen de faire en sorte que indice_struct ne se balade pas de partout)

# remarque à rajouter : si les rythmes ne sont pas sur les temps forts, vérifier ce qu'il se passe 
# Est-ce que compte_temps_fort fonctionne toujours correctement ? Est-ce que temps_fort passe à True ou pas ? 
# Est-ce que ça peut créer des décalages ? -> Faire les tests pour vérifier

#funny


derniere_voix = pd.Series([], dtype = object) 

struct_globale = [[0,'i'],[0,'rt+2'],[0,'rt-4'],[0,'rt+4'],[1,'i'],[1,'rt+2'],[1,'rt-4'],[1,'rt+2']]

option_rythme_voix1 = ['-lyr3','-lyr1'] 

funny_structure = pd.Series([struct_globale, 2, option_rythme_voix1, None, derniere_voix, 100], 
                    index=['struct_globale','taille_des_structures','option_rythme','instrument','autre_voix','volume'])


etiquette = ['debut-lyr1', 'fin-lyr1', 'debut-lyr2', 'fin-lyr2', 'debut-acc', 'fin-acc', 'debut-lyr3', 'fin-lyr3']

funny_rythme = pd.Series([[[8,8,8,8],[8,8,8,4,4],[4,4,4,4,8,4,4],[8,4,4,8,4,4]], 
                            [[8,4,4,2,2,4,8],[8,8,16],[4,4,4,4,8,8]], 
                            [[12,4,12,4],[16,16]], 
                            [[16,16],[12,4,12,4],[16,8,8]], 
                            [[8,8,8,8],[16,16],[8,8,16]], 
                            [[16,16],[8,8,16]],
                            [[4,4,4,4,2,2,8,4],[4,4,4,4,4,4,4,4],[8,4,4,8,4,4]],
                            [[4,4,4,4,4,4,4,4],[8,4,8,4,8]]], index=etiquette)




liste_gamme_majeur = [0,2,4,5,7,9,11]
liste_gamme_mineur = [0,2,3,5,7,8,10]
liste_gamme_minSensibleAlter = [0,2,3,5,7,8,11]
liste_gamme_pynthatoniqueMin = [0,3,5,7,11]
liste_gamme_pynthatoniqueMaj = [0,4,5,7,11]
liste_gamme_jazz1 = [0,3,4,5,7,10,11]
liste_gamme_chromatique = [0,1,2,3,4,5,6,7,8,9,10,11]



premiere_note_classique = [0]
premiere_note_classique2 = [0,4]


acc_parfait = [0,3,7]
acc_parfait1rev = [-3,0,2]
acc_final = [0]
acc_septieme3 = [7,11,2,5]
acc_septieme4 = [-1,1,3,5]
acc_dominante3 = [-3,-1,1,4] # remarque : l'ordre des notes de l'accord peut avoir du sens
acc_dominante4 = [-1,1,2,4]
acc_mediante = [2,4,6]
acc_seconde = [-2,0,1,3,5]


orn_conjoint = [['avn',-1,1],['avn',-1,1],['avn',1,-1]]
orn_conjoint_melodique = [['ars',-1,1],['ars',-1,1],['ars',-1,1]] # Le meilleur pour les mouvements conjoints
orn_retard_conjoint_appogiature = [['avn',0],['avn',-1,1],['apr',-1,1]] # vérifier si les appoggiatures marchent
orn_retard_conjoint = [['avn',0],['avn',-1,1],['avn',-1,1]]
orn_conjoint_appoggiature = [['avn',-1,1],['ars',-1,1],['apr',-1,1]] # Celui là est probablement pas mal
orn_quasiConjoint_appoggiature = [['avn',-2,-1,1,2],['avn',-1,-1,1,1,0],['apr',1,-1]]


orn_accord_parfait = [['abs',0,2,4],['abs',0,2,4],['abs',0,2,4]]
orn_accord_septieme = [['abs',1,3,4,6],['abs',1,3,4,6],['abs',1,3,4,6]]

orn_random = [['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6]]
orn_conjoint_randomLim_echapee = [['avn',-1,1],['abs',0,2,3,4],['abs',5]]
orn_conjoint_echapee_montant = [['avn',-1,1],['avn',1],['avn',1,2]]
orn_conjoint_echapee_descendant = [['avn',-1,1,1],['avn',-1],['avn',-1,-2]]

orn_avantFinal = [['avn',-1,1],['abs',-1,1,2,4],['apr',-1,2]]
orn_final = [['avn',-1,1],['abs',-3,0,4],['abs',0]]
orn_retard_ascendant1 = [['avn',0],['avn',0,1,1,1],['avn',0,1,1,2]]
orn_retard_ascendant2 = [['avn',0],['avn',0,1,1,1],['apr',-1,1]]


largo = [48,60]
adagio = [56,72]
andante = [76,90]
allegro = [100,120]
presto_1 = [120,140]
presto_2 = [140,160]



accords = [[acc_parfait,acc_septieme3],[acc_septieme3,acc_final]]
ornementations = [[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_final]]

funny_notes = pd.Series([liste_gamme_chromatique, 32, premiere_note_classique, 4, accords, ornementations, presto_1, derniere_voix], 
                        index=['liste_gammes','duree_temps_fort','premiere_note','hauteur_moyenne','accords','ornementations','tempo','autre_voix'])


description = "Il s'agit d'une architecture de morceau évoquant la rigolade"

funny = pd.Series([funny_structure, funny_rythme, funny_notes, description],
                    index = ['emotion_structure', 'emotion_rythme', 'emotion_notes', 'description'])

#fear
derniere_voix = pd.Series([], dtype = object)

struct_globale = [[0,'i'],[1,'i'],[2,'i'],[3,'i'],[2,'rt-4'],[3,'rt+2'],[2,'rt+6'],[1,'i']]
option_rythme_voix1 = ['-lyr3','-lyr1'] 
fear_structure = pd.Series([struct_globale, 2, option_rythme_voix1, None, derniere_voix, 100], 
                    index=['struct_globale','taille_des_structures','option_rythme','instrument','autre_voix','volume'])

etiquette = ['debut-lyr1', 'fin-lyr1', 'debut-lyr2', 'fin-lyr2', 'debut-acc', 'fin-acc', 'debut-lyr3', 'fin-lyr3','debut-lyr4','fin-lyr4']

fear_rythme = pd.Series([[[8,8,8,8],[8,8,8,4,4],[4,4,4,4,8,4,4],[8,4,4,8,4,4]], 
                            [[8,4,4,2,2,4,8],[8,8,16],[4,4,4,4,8,8]], 
                            [[12,4,12,4],[16,16]], 
                            [[16,16],[12,4,12,4],[16,8,8]], 
                            [[8,8,8,8],[16,16],[8,8,16]], 
                            [[16,16],[8,8,16]],
                            [[4,4,4,4,2,2,8,4],[4,4,4,4,4,4,4,4],[8,4,4,8,4,4]],
                            [[4,4,4,4,4,4,4,4],[8,4,8,4,8]],
                            [[32],[32],[16,16]],
                            [[32],[32],[16,16]]], index=etiquette)

liste_gamme_majeur = [0,2,4,5,7,9,11]
liste_gamme_mineur = [0,2,3,5,7,8,10]
liste_gamme_minSensibleAlter = [0,2,3,5,7,8,11]
liste_gamme_pynthatoniqueMin = [0,3,5,7,11]
liste_gamme_pynthatoniqueMaj = [0,4,5,7,11]
liste_gamme_jazz1 = [0,3,4,5,7,10,11]
liste_gamme_chromatique = [0,1,2,3,4,5,6,7,8,9,10,11]
liste_gamme_fear = [0,2,3,5,6,7,9,11]


premiere_note_classique = [0]
premiere_note_classique2 = [0,4]


acc_parfait = [0,2,4]
acc_parfait1rev = [-3,0,2]
acc_final = [0,0,0,7]
acc_septieme3 = [-1,1,3]
acc_septieme4 = [-1,1,3,5]
acc_dominante3 = [-3,-1,1,4]
acc_dominante4 = [-1,1,2,4]
acc_mediante = [2,4,6]
acc_seconde = [-2,0,1,3,5]

acc_parfait_min = [0,2,5]
acc_diminue = [0,2,4]
acc_septieme = [-3,-1,1,3]



orn_conjoint = [['avn',-1,1],['avn',-1,1],['avn',1,-1]]
orn_conjoint_melodique = [['ars',-1,1],['ars',-1,1],['ars',-1,1]] # Le meilleur pour les mouvements conjoints
orn_retard_conjoint_appogiature = [['avn',0],['avn',-1,1],['apr',-1,1]] # vérifier si les appoggiatures marchent
orn_retard_conjoint = [['avn',0],['avn',-1,1],['avn',-1,1]]
orn_conjoint_appoggiature = [['avn',-1,1],['ars',-1,1],['apr',-1,1]] # Celui là est probablement pas mal
orn_quasiConjoint_appoggiature = [['avn',-2,-1,1,2],['avn',-1,-1,1,1,0],['apr',1,-1]]


orn_accord_parfait = [['abs',0,2,4],['abs',0,2,4],['abs',0,2,4]]
orn_accord_septieme = [['abs',1,3,4,6],['abs',1,3,4,6],['abs',1,3,4,6]]

orn_random = [['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6]]
orn_conjoint_randomLim_echapee = [['avn',-1,1],['abs',0,2,3,4],['abs',5]]
orn_conjoint_echapee_montant = [['avn',-1,1],['avn',1],['avn',1,2]]
orn_conjoint_echapee_descendant = [['avn',-1,1,1],['avn',-1],['avn',-1,-2]]

orn_avantFinal = [['avn',-1,1],['abs',-1,1,2,4],['apr',-1,2]]
orn_final = [['avn',-1,1],['abs',-3,0,4],['abs',0]]
orn_retard_ascendant1 = [['avn',0],['avn',0,1,1,1],['avn',0,1,1,2]]
orn_retard_ascendant2 = [['avn',0],['avn',0,1,1,1],['apr',-1,1]]

orn_conjoint_ton = [['ars',-2,2],['ars',-2,2],['ars',-2,2]] # Pour la gamme par demi-ton


largo = [48,60]
adagio = [56,72]
andante = [76,90]
allegro = [100,120]
presto_1 = [120,140]
presto_2 = [140,160]




accords = [[acc_parfait_min,acc_septieme],[acc_diminue,acc_final],[acc_parfait_min,acc_diminue],[acc_diminue,acc_final]]
ornementations = [[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_final]]


fear_notes = pd.Series([liste_gamme_fear, 32, premiere_note_classique, 4, accords, ornementations, presto_2, derniere_voix], 
                        index=['liste_gammes','duree_temps_fort','premiere_note','hauteur_moyenne','accords','ornementations','tempo','autre_voix'])


description = "Il s'agit d'une architecture de morceau évoquant la rigolade"

fear = pd.Series([fear_structure, fear_rythme, fear_notes, description],
                    index = ['emotion_structure', 'emotion_rythme', 'emotion_notes', 'description'])

#annoyance
derniere_voix = pd.Series([], dtype = object)

struct_globale = [[0,'i']]
option_rythme_voix1 = ['-lyrAnnoying','-lyr1'] 
annoyance_structure = pd.Series([struct_globale, 2, option_rythme_voix1, None, derniere_voix, 100], 
                    index=['struct_globale','taille_des_structures','option_rythme','instrument','autre_voix','volume'])

etiquette = ['debut-lyr1', 'fin-lyr1', 'debut-lyr2', 'fin-lyr2', 'debut-acc', 'fin-acc', 'debut-lyr3', 'fin-lyr3','debut-lyr4','fin-lyr4','debut-lyrAnnoying','fin-lyrAnnoying']

annoyance_rythme = pd.Series([[[8,8,8,8],[8,8,8,4,4],[4,4,4,4,8,4,4],[8,4,4,8,4,4]], 
                            [[8,4,4,2,2,4,8],[8,8,16],[4,4,4,4,8,8]], 
                            [[12,4,12,4],[16,16]], 
                            [[16,16],[12,4,12,4],[16,8,8]], 
                            [[8,8,8,8],[16,16],[8,8,16]], 
                            [[16,16],[8,8,16]],
                            [[4,4,4,4,2,2,8,4],[4,4,4,4,4,4,4,4],[8,4,4,8,4,4]],
                            [[4,4,4,4,4,4,4,4],[8,4,8,4,8]],
                            [[32],[32],[16,16]],
                            [[32],[32],[16,16]],
                            [[2,4,1,7,6,2,8,2]],
                            [[4,7,7,5,5,1,3]]], index=etiquette)

liste_gamme_majeur = [0,2,4,5,7,9,11]
liste_gamme_mineur = [0,2,3,5,7,8,10]
liste_gamme_minSensibleAlter = [0,2,3,5,7,8,11]
liste_gamme_pynthatoniqueMin = [0,3,5,7,11]
liste_gamme_pynthatoniqueMaj = [0,4,5,7,11]
liste_gamme_jazz1 = [0,3,4,5,7,10,11]
liste_gamme_chromatique = [0,1,2,3,4,5,6,7,8,9,10,11]
liste_gamme_fear = [0,2,3,5,6,7,9,11]


premiere_note_classique = [0]
premiere_note_classique2 = [0,4]


acc_parfait = [0,2,4]
acc_parfait1rev = [-3,0,2]
acc_final = [0,0,0,7]
acc_septieme3 = [-1,1,3]
acc_septieme4 = [-1,1,3,5]
acc_dominante3 = [-3,-1,1,4]
acc_dominante4 = [-1,1,2,4]
acc_mediante = [2,4,6]
acc_seconde = [-2,0,1,3,5]
acc_annoying = [0,1,4,5,8,9,10,11]
acc_parfait_min = [0,2,5]
acc_diminue = [0,2,4]
acc_septieme = [-3,-1,1,3]



orn_conjoint = [['avn',-1,1],['avn',-1,1],['avn',1,-1]]
orn_conjoint_melodique = [['ars',-1,1],['ars',-1,1],['ars',-1,1]] # Le meilleur pour les mouvements conjoints
orn_retard_conjoint_appogiature = [['avn',0],['avn',-1,1],['apr',-1,1]] # vérifier si les appoggiatures marchent
orn_retard_conjoint = [['avn',0],['avn',-1,1],['avn',-1,1]]
orn_conjoint_appoggiature = [['avn',-1,1],['ars',-1,1],['apr',-1,1]] # Celui là est probablement pas mal
orn_quasiConjoint_appoggiature = [['avn',-2,-1,1,2],['avn',-1,-1,1,1,0],['apr',1,-1]]


orn_accord_parfait = [['abs',0,2,4],['abs',0,2,4],['abs',0,2,4]]
orn_accord_septieme = [['abs',1,3,4,6],['abs',1,3,4,6],['abs',1,3,4,6]]

orn_random = [['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6]]
orn_conjoint_randomLim_echapee = [['avn',-1,1],['abs',0,2,3,4],['abs',5]]
orn_conjoint_echapee_montant = [['avn',-1,1],['avn',1],['avn',1,2]]
orn_conjoint_echapee_descendant = [['avn',-1,1,1],['avn',-1],['avn',-1,-2]]

orn_avantFinal = [['avn',-1,1],['abs',-1,1,2,4],['apr',-1,2]]
orn_final = [['avn',-1,1],['abs',-3,0,4],['abs',0]]
orn_retard_ascendant1 = [['avn',0],['avn',0,1,1,1],['avn',0,1,1,2]]
orn_retard_ascendant2 = [['avn',0],['avn',0,1,1,1],['apr',-1,1]]

orn_conjoint_ton = [['ars',-2,2],['ars',-2,2],['ars',-2,2]] # Pour la gamme par demi-ton


largo = [48,60]
adagio = [56,72]
andante = [76,90]
allegro = [100,120]
presto_1 = [120,140]
presto_2 = [140,160]




accords = [[acc_parfait_min,acc_septieme],[acc_parfait_min,acc_diminue],[acc_diminue,acc_final]]
ornementations = [[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_final]]


annoyance_notes = pd.Series([liste_gamme_chromatique, 32, premiere_note_classique, 4, accords, ornementations, presto_2, derniere_voix], 
                        index=['liste_gammes','duree_temps_fort','premiere_note','hauteur_moyenne','accords','ornementations','tempo','autre_voix'])


description = "Il s'agit d'une architecture de morceau évoquant l'embetement"

annoyance = pd.Series([annoyance_structure, annoyance_rythme, annoyance_notes, description],
                    index = ['emotion_structure', 'emotion_rythme', 'emotion_notes', 'description'])

#pride
derniere_voix = pd.Series([], dtype = object)

struct_globale = [[0,'i'],[0,'rt+4'],[1,'i'],[0,'rt+1'],[1,'rt-5']]
option_rythme_voix1 = ['-acc','-lyr2'] 
pride_structure = pd.Series([struct_globale, 2, option_rythme_voix1, None, derniere_voix, 100], 
                    index=['struct_globale','taille_des_structures','option_rythme','instrument','autre_voix','volume'])

etiquette = ['debut-lyr1', 'fin-lyr1', 'debut-lyr2', 'fin-lyr2', 'debut-acc', 'fin-acc', 'debut-lyr3', 'fin-lyr3','debut-lyr4','fin-lyr4']

pride_rythme = pd.Series([[[8,8,8,8],[8,8,8,4,4],[4,4,4,4,8,4,4],[8,4,4,8,4,4]], 
                            [[8,4,4,2,2,4,8],[8,8,16],[4,4,4,4,8,8]], 
                            [[12,4,12,4],[16,16]], 
                            [[16,16],[12,4,12,4],[16,8,8],[32]], 
                            [[8,8,8,8],[16,16],[8,8,16],[32]], 
                            [[16,16],[8,8,16]],
                            [[4,4,4,4,2,2,8,4],[4,4,4,4,4,4,4,4],[8,4,4,8,4,4]],
                            [[4,4,4,4,4,4,4,4],[8,4,8,4,8]],
                            [[32],[32],[16,16]],
                            [[32],[32],[16,16]]], index=etiquette)

liste_gamme_majeur = [0,2,4,5,7,9,11]
liste_gamme_mineur = [0,2,3,5,7,8,10]
liste_gamme_minSensibleAlter = [0,2,3,5,7,8,11]
liste_gamme_pynthatoniqueMin = [0,3,5,7,11]
liste_gamme_pynthatoniqueMaj = [0,4,5,7,11]
liste_gamme_jazz1 = [0,3,4,5,7,10,11]
liste_gamme_chromatique = [0,1,2,3,4,5,6,7,8,9,10,11]
liste_gamme_fear = [0,2,3,5,6,7,9,11]


premiere_note_classique = [0]
premiere_note_classique2 = [0,4]


acc_parfait = [0,2,4]
acc_parfait1rev = [-3,0,2]
acc_final = [0,0,0,7]
acc_septieme3 = [-1,1,3]
acc_septieme4 = [-1,1,3,5]
acc_dominante3 = [-3,-1,1,4]
acc_dominante4 = [-1,1,2,4]
acc_mediante = [2,4,6]
acc_seconde = [-2,0,1,3,5]

acc_parfait_min = [0,2,5]
acc_diminue = [0,2,4]
acc_septieme = [-3,-1,1,3]



orn_conjoint = [['avn',-1,1],['avn',-1,1],['avn',1,-1]]
orn_conjoint_melodique = [['ars',-1,1],['ars',-1,1],['ars',-1,1]] # Le meilleur pour les mouvements conjoints
orn_retard_conjoint_appogiature = [['avn',0],['avn',-1,1],['apr',-1,1]] # vérifier si les appoggiatures marchent
orn_retard_conjoint = [['avn',0],['avn',-1,1],['avn',-1,1]]
orn_conjoint_appoggiature = [['avn',-1,1],['ars',-1,1],['apr',-1,1]] # Celui là est probablement pas mal
orn_quasiConjoint_appoggiature = [['avn',-2,-1,1,2],['avn',-1,-1,1,1,0],['apr',1,-1]]


orn_accord_parfait = [['abs',0,2,4],['abs',0,2,4],['abs',0,2,4]]
orn_accord_septieme = [['abs',1,3,4,6],['abs',1,3,4,6],['abs',1,3,4,6]]

orn_random = [['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6]]
orn_conjoint_randomLim_echapee = [['avn',-1,1],['abs',0,2,3,4],['abs',5]]
orn_conjoint_echapee_montant = [['avn',-1,1],['avn',1],['avn',1,2]]
orn_conjoint_echapee_descendant = [['avn',-1,1,1],['avn',-1],['avn',-1,-2]]

orn_avantFinal = [['avn',-1,1],['abs',-1,1,2,4],['apr',-1,2]]
orn_final = [['avn',-1,1],['abs',-3,0,4],['abs',0]]
orn_retard_ascendant1 = [['avn',0],['avn',0,1,1,1],['avn',0,1,1,2]]
orn_retard_ascendant2 = [['avn',0],['avn',0,1,1,1],['apr',-1,1]]

orn_conjoint_ton = [['ars',-2,2],['ars',-2,2],['ars',-2,2]] # Pour la gamme par demi-ton


largo = [48,60]
adagio = [56,72]
andante = [76,90]
allegro = [100,120]
presto_1 = [120,140]
presto_2 = [140,160]




accords = [[acc_parfait,acc_parfait1rev],[acc_parfait,acc_parfait1rev],[acc_parfait,acc_septieme],[acc_parfait1rev,acc_septieme],[acc_diminue,acc_final]]
ornementations = [[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_final]]


pride_notes = pd.Series([liste_gamme_majeur, 32, premiere_note_classique, 4, accords, ornementations, presto_1, derniere_voix], 
                        index=['liste_gammes','duree_temps_fort','premiere_note','hauteur_moyenne','accords','ornementations','tempo','autre_voix'])


description = "Il s'agit d'une architecture de morceau évoquant la fierté"

pride = pd.Series([pride_structure, pride_rythme, pride_notes, description],
                    index = ['emotion_structure', 'emotion_rythme', 'emotion_notes', 'description'])

#neutral
derniere_voix = pd.Series([], dtype = object)

struct_globale = [[0,'i'],[0,'r'],[0,'r'],[0,'r'],[0,'r'],[0,'r'],[0,'r']]
option_rythme_voix1 = ['-lyr5'] 
neutral_structure = pd.Series([struct_globale, 2, option_rythme_voix1, None, derniere_voix, 100], 
                    index=['struct_globale','taille_des_structures','option_rythme','instrument','autre_voix','volume'])

etiquette = ['debut-lyr1', 'fin-lyr1', 'debut-lyr2', 'fin-lyr2', 'debut-acc', 'fin-acc', 'debut-lyr3', 'fin-lyr3','debut-lyr4','fin-lyr4','debut-lyr5','fin-lyr5']

neutral_rythme = pd.Series([[[8,8,8,8],[8,8,8,4,4],[4,4,4,4,8,4,4],[8,4,4,8,4,4]], 
                            [[8,4,4,2,2,4,8],[8,8,16],[4,4,4,4,8,8]], 
                            [[12,4,12,4],[16,16]], 
                            [[16,16],[12,4,12,4],[16,8,8]], 
                            [[8,8,8,8],[16,16],[8,8,16]], 
                            [[16,16],[8,8,16]],
                            [[4,4,4,4,2,2,8,4],[4,4,4,4,4,4,4,4],[8,4,4,8,4,4]],
                            [[4,4,4,4,4,4,4,4],[8,4,8,4,8]],
                            [[32],[32],[16,16]],
                            [[32],[32],[16,16]],
                            [[32]],
                            [[32]]], index=etiquette)

liste_gamme_majeur = [0,2,4,5,7,9,11]
liste_gamme_mineur = [0,2,3,5,7,8,10]
liste_gamme_minSensibleAlter = [0,2,3,5,7,8,11]
liste_gamme_pynthatoniqueMin = [0,3,5,7,11]
liste_gamme_pynthatoniqueMaj = [0,4,5,7,11]
liste_gamme_jazz1 = [0,3,4,5,7,10,11]
liste_gamme_chromatique = [0,1,2,3,4,5,6,7,8,9,10,11]
liste_gamme_fear = [0,2,3,5,6,7,9,11]


premiere_note_classique = [0]
premiere_note_classique2 = [0,4]


acc_parfait = [0,2,4]
acc_parfait1rev = [-3,0,2]
acc_final = [0,0,0,7]
acc_septieme3 = [-1,1,3]
acc_septieme4 = [-1,1,3,5]
acc_dominante3 = [-3,-1,1,4]
acc_dominante4 = [-1,1,2,4]
acc_mediante = [2,4,6]
acc_seconde = [-2,0,1,3,5]

acc_parfait_min = [0,2,5]
acc_diminue = [0,2,4]
acc_septieme = [-3,-1,1,3]



orn_conjoint = [['avn',-1,1],['avn',-1,1],['avn',1,-1]]
orn_conjoint_melodique = [['ars',-1,1],['ars',-1,1],['ars',-1,1]] # Le meilleur pour les mouvements conjoints
orn_retard_conjoint_appogiature = [['avn',0],['avn',-1,1],['apr',-1,1]] # vérifier si les appoggiatures marchent
orn_retard_conjoint = [['avn',0],['avn',-1,1],['avn',-1,1]]
orn_conjoint_appoggiature = [['avn',-1,1],['ars',-1,1],['apr',-1,1]] # Celui là est probablement pas mal
orn_quasiConjoint_appoggiature = [['avn',-2,-1,1,2],['avn',-1,-1,1,1,0],['apr',1,-1]]


orn_accord_parfait = [['abs',0,2,4],['abs',0,2,4],['abs',0,2,4]]
orn_accord_septieme = [['abs',1,3,4,6],['abs',1,3,4,6],['abs',1,3,4,6]]

orn_random = [['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6],['avn',-4,-3,-2,-1,0,1,2,3,4,5,6]]
orn_conjoint_randomLim_echapee = [['avn',-1,1],['abs',0,2,3,4],['abs',5]]
orn_conjoint_echapee_montant = [['avn',-1,1],['avn',1],['avn',1,2]]
orn_conjoint_echapee_descendant = [['avn',-1,1,1],['avn',-1],['avn',-1,-2]]

orn_avantFinal = [['avn',-1,1],['abs',-1,1,2,4],['apr',-1,2]]
orn_final = [['avn',-1,1],['abs',-3,0,4],['abs',0]]
orn_retard_ascendant1 = [['avn',0],['avn',0,1,1,1],['avn',0,1,1,2]]
orn_retard_ascendant2 = [['avn',0],['avn',0,1,1,1],['apr',-1,1]]

orn_conjoint_ton = [['ars',-2,2],['ars',-2,2],['ars',-2,2]] # Pour la gamme par demi-ton


largo = [48,60]
adagio = [56,72]
andante = [76,90]
allegro = [100,120]
presto_1 = [120,140]
presto_2 = [140,160]




accords = [[acc_parfait,acc_parfait]]
ornementations = [[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_conjoint_melodique],[orn_conjoint_melodique,orn_final]]


neutral_notes = pd.Series([liste_gamme_majeur, 32, premiere_note_classique, 4, accords, ornementations, presto_2, derniere_voix], 
                        index=['liste_gammes','duree_temps_fort','premiere_note','hauteur_moyenne','accords','ornementations','tempo','autre_voix'])


description = "Il s'agit d'une architecture de morceau évoquant la neutralité"

neutral = pd.Series([neutral_structure, neutral_rythme, neutral_notes, description],
                    index = ['emotion_structure', 'emotion_rythme', 'emotion_notes', 'description'])

import numpy as np


Do = [32.70,65.41,130.81,261.63,523.25,1046.50,2093.00,4186.01,8372.02,16744.04]
Do_d = [34.65,69.30,138.59,277.18,554.37,1108.73,2217.46,4434.92,8869.84,17739.68]
Re = [36.71,73.42,146.83,293.66,587.33,1174.66,2349.32,4698.64,9397.28,18794.56]
Re_d = [38.89,77.78,155.56,311.13,622.25,1244.51,2489.02,4978.03,9956.06,19912.12]
Mi = [41.20,82.41,164.81,329.63,659.26,1318.51,2637.02,5274.04,10548.08,21096.16]
Fa = [43.65,87.31,174.61,349.23,698.46,1396.91,2793.83,5587.65,11175.30,22350.60]
Fa_d = [46.25,92.50,185.00,369.99,739.99,1479.98,2959.96,5919.91,11839.82,23679.64]
Sol = [49.00,98.00,196.00,392.00,783.99,1567.98,3135.96,6271.93,12543.86,25087.72]
Sol_d = [51.91,103.83,207.65,415.30,830.61,1661.22,3322.44,6644.88,13289.76,26579.52]
La = [55.00,110.00,220.00,440.00,880.00,1760.00,3520.00,7040.00,14080.00,28160.00]
La_d = [58.27,116.54,233.08,466.16,932.33,1864.66,3729.31,7458.62,14917.24,29834.48]
Si = [61.74,123.47,246.94,493.88,987.77,1975.53,3951.07,7902.13,15804.26,31608.52]

Notes = np.array([Do, Do_d, Re, Re_d, Mi, Fa, Fa_d, Sol, Sol_d, La, La_d, Si])


def generer_frequence(note, liste_gamme, longueur_gamme, fondamentale, hauteur_moyenne, Notes):
    ind_note = liste_gamme[note % longueur_gamme] + fondamentale
    hauteur = hauteur_moyenne + (note//longueur_gamme)
    try:
        freq = Notes[ind_note % 12][hauteur + ind_note//12]
    except IndexError:
        print("Une erreur à eu lieu, parce que la hauteur des notes a dépassé la hauteur max. ou min.")
        print("La hauteur va être automoatiquement corrigée, mais certaines notes pourraient ne pas correspondre à ce que vous vouliez")
        print("TagError : IndexError/gestion_temps_frequence/generer_frequence/7-50.20")
        if(hauteur + ind_note//12 > 9):
            hauteur = 9
        elif(hauteur + ind_note//12 < 0):
            hauteur = 0
        else:
            print("L'erreur n'a pas pu être corrigée")
            print("TagError : InternalError/gestion_temps_frequence/generer_frequence/7-55.21")
            exit()
        freq = Notes[ind_note % 12][hauteur]
    return freq


def duree_rythme(rythme, tempo):
    return (rythme/8)*60000/tempo


def conversion_temps_frequence(structure_melodique_norm, emotion_notes, fondamentale, tempo):
    part_liste_finale = []
    liste_gamme = emotion_notes['liste_gammes']
    longueur_gamme = len(liste_gamme)
    hauteur_moyenne = emotion_notes['hauteur_moyenne']
    for note_rythme in structure_melodique_norm:
        freq = generer_frequence(note_rythme[0], liste_gamme, longueur_gamme, fondamentale, hauteur_moyenne, Notes)
        duree = duree_rythme(note_rythme[1], tempo)
        part_liste_finale.append([int(freq),int(duree)])
    return part_liste_finale
